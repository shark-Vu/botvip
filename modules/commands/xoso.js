const axios = require('axios');
const schedule = require('node-schedule');

async function layKetQuaXoSoMB() {
    try {
        const response = await axios.get('https://api.xoso.me/mien-bac'); // API tham kh·∫£o, ƒë·ªïi n·∫øu c√≥ link kh√°c
        const data = response.data;

        if (!data || !data.lottery) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu x·ªï s·ªë Mi·ªÅn B·∫Øc!");

        let ketQua = '„Äêüì¢„ÄëK·∫øt qu·∫£ x·ªï s·ªë Mi·ªÅn B·∫Øc h√¥m nay:\n\n';

        data.lottery.prizes.forEach(prize => {
            ketQua += `- ${prize.name}: ${prize.number}\n`;
        });

        return ketQua;
    } catch (error) {
        console.error("L·ªói l·∫•y k·∫øt qu·∫£ x·ªï s·ªë MB:", error);
        return "Kh√¥ng l·∫•y ƒë∆∞·ª£c k·∫øt qu·∫£ x·ªï s·ªë Mi·ªÅn B·∫Øc h√¥m nay.";
    }
}

async function guiKetQuaXoSoMB(api) {
    const ketQua = await layKetQuaXoSoMB();

    api.getThreadList(50, null, ["INBOX"], (err, list) => {
        if (err) return console.error(err);

        list.forEach(thread => {
            if (thread.isGroup) {
                api.sendMessage(ketQua, thread.threadID, (err) => {
                    if (err) console.error(`G·ª≠i KQXS MB l·ªói t·∫°i nh√≥m ${thread.threadID}: ${err}`);
                });
            }
        });
    });
}

function startAutoXoSoMB(api) {
    schedule.scheduleJob('30 18 * * *', () => guiKetQuaXoSoMB(api));  // 18h30 m·ªói ng√†y
}

module.exports = {
    config: {
        name: "autoXoSoMB",
        version: "1.0.0",
        hasPermission: 2,
        credits: "Ngtuan",
        description: "T·ª± ƒë·ªông g·ª≠i k·∫øt qu·∫£ x·ªï s·ªë Mi·ªÅn B·∫Øc h√†ng ng√†y",
        commandCategory: "Ti·ªán √≠ch",
        usages: "",
        cooldowns: 5
    },
    onLoad({ api }) {
        startAutoXoSoMB(api);
        console.log("ƒê√£ b·∫≠t autoXoSoMB th√†nh c√¥ng!");
    },
    run({ event, api }) {
        api.sendMessage("L·ªánh n√†y t·ª± ƒë·ªông ch·∫°y, kh√¥ng c·∫ßn g·ªçi th·ªß c√¥ng!", event.threadID);
    }
};