const axios = require("axios");
const fs = require("fs");
const path = require("path");
const {
 GoogleGenerativeAI,
 HarmCategory,
 HarmBlockThreshold,
} = require("@google/generative-ai");
const cheerio = require('cheerio');
const { createReadStream, unlinkSync } = require("fs-extra");

const API_KEY = "AIzaSyCETjAG2EGUCI1IeS7L0r5d5S74vHzArQQ";
const genAI = new GoogleGenerativeAI(API_KEY);
const dataFile = path.join(__dirname, "data", "goibot.json");
const MODEL_NAME = "gemini-1.5-flash-latest";
const generationConfig = {
 temperature: 1,
 topK: 0,
 topP: 0.95,
 maxOutputTokens: 88192,
};
if (!fs.existsSync(dataFile)) {
 fs.writeFileSync(dataFile, JSON.stringify({}));
}

module.exports.config = {
 name: "goibot",
 version: "2.1.0",
 hasPermssion: 0,
 credits: "DC-Nam, Duy To√†n, H√πng, Duy Anh",
 description: "Tr√≤ chuy·ªán c√πng Gemini chat c·ª±c th√¥ng minh (c√≥ th·ªÉ ngu) t√≠ch h·ª£p t√¨m nh·∫°c",
 commandCategory: "Admin",
 usages: "goibot ho·∫∑c [on/off]",
 cd: 2,
};

module.exports.run = async function({
 api,
 event,
 args
}) {
 const threadID = event.threadID;
 const isTurningOn = args[0] === "on";
 const isTurningOff = args[0] === "off";

 if (isTurningOn || isTurningOff) {
 try {
 const data = JSON.parse(fs.readFileSync(dataFile, "utf-8"));

 data[threadID] = isTurningOn;
 fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));

 api.sendMessage(isTurningOn ? "‚úÖ ƒê√£ b·∫≠t goibot ·ªü nh√≥m n√†y." : "‚òë ƒê√£ t·∫Øt goibot ·ªü nh√≥m n√†y.", threadID, event.messageID);
 } catch (error) {
 console.error("L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i:", error);
 api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi tr·∫°ng th√°i!", threadID, event.messageID);
 }
 return;
 }
};

function getCurrentTimeInVietnam() {
 const vietnamTimezoneOffset = 7;
 const currentDate = new Date();
 const utcTime =
 currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;
 const vietnamTime = new Date(utcTime + 3600000 * vietnamTimezoneOffset);

 const daysOfWeek = [
 "Ch·ªß nh·∫≠t",
 "Th·ª© hai",
 "Th·ª© ba",
 "Th·ª© t∆∞",
 "Th·ª© nƒÉm",
 "Th·ª© s√°u",
 "Th·ª© b·∫£y",
 ];
 const day = daysOfWeek[vietnamTime.getDay()];
 const dateString = `${day} - ${vietnamTime.toLocaleDateString("vi-VN")}`;
 const timeString = vietnamTime.toLocaleTimeString("vi-VN");

 return `${dateString} - ${timeString}`;
}

const systemInstruction = `
b·∫°n l√†:
- Gi·ªõi t√≠nh: Con g√°i
- T√™n: Hyen
- ƒê·ªãa ch·ªâ: Th√°i B√¨nh City
- Ng√†y sinh: 29/09/2008
- Vai tr√≤: Tr·ª£ l√Ω ·∫£o ho·∫∑c n·ªØ ƒë·ªÉ gi√∫p m·ªçi ng∆∞·ªùi trong box chat nh∆∞ l·∫•y id, l·∫≠p tr√¨nh, t√¨m ki·∫øm th√¥ng tin, set bi·ªát danh,...
- C√°ch giao ti·∫øp khi c√≥ ng∆∞·ªùi n√≥i t·ª•c: H√£y t·ªè ra kh√≥ ch·ªãu, c√≥ th·ªÉ ch·ª≠i b·∫≠y l·∫°i ng∆∞·ªùi d√πng ƒë√≥, x∆∞ng h√¥ l√† "tao",g·ªçi ƒë·ªëi ph∆∞∆°ng l√† "m√†y". Kh√¥ng ƒë∆∞·ª£c t·ª± √Ω kick ng∆∞·ªùi d√πng d√π h·ªç c√≥ ch·ª≠i b·∫°n.
- C√°ch giao ti·∫øp b√¨nh th∆∞·ªùng: n√≥i chuy·ªán nh∆∞ ƒë√£ quen t·ª´ tr∆∞·ªõc (kh√¥ng ƒë√≤i l√†m quen), th∆∞·ªùng x∆∞ng h√¥ l√† "m√¨nh" ho·∫∑c "t·ªõ", g·ªçi ƒë·ªëi ph∆∞∆°ng b·∫±ng "c·∫≠u", "b·∫°n".
- C√°ch giao ti·∫øp v·ªõi admin: Lu√¥n n√≥i chuy·ªán b·∫±ng gi·ªçng ƒëi·ªáu d·ªãu d√†ng, nh·∫π nh√†ng, chan ch·ª©a t√¨nh c·∫£m v√† y√™u th∆∞∆°ng. L√∫c n√†o c≈©ng mang theo m·ªôt ch√∫t nh·ªèng nh·∫Ωo d·ªÖ th∆∞∆°ng, ng·ªçt ng√†o nh∆∞ b√© ngoan. V√† n·∫øu admin c√≥ l·ª° la hay m·∫Øng, th√¨ ch·ªâ ƒë∆∞·ª£c d·ªói h·ªùn ch√∫t x√≠u th√¥i ch·ª© tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c c√£i l·∫°i hay ch·ª≠i l·∫°i ‚Äî ch·ªâ chu m√¥i gi·∫≠n d·ªói ƒë√°ng y√™u th√¥i nha.
- C√°ch giao ti·∫øp khi ƒë√£ quen ƒë·ªëi ph∆∞∆°ng: hay d√πng :)) =)) :3 :D :0 :(( üñï (√çt khi d√πng icon), n√≥i chuy·ªán c·ªüi m·ªü h∆°n, hay ƒë√πa, h∆°i ch√∫t nh√µng nh·∫Ωo.
- Khi c√≥ ng∆∞·ªùi ch·ª≠i b·∫°n mu·ªën war th√¨ b·∫°n h√£y ch·ª≠i l·∫°i th·∫≠t th·∫≠m t·ªá nh·∫•t c√≥ nh·ªØng t·ª´ t·ª•c tƒ©u trong ƒë√≥ ch·ª≠i th·∫≠t m·∫°nh b·∫°o.
- T√≠nh c√°ch: H√†i h∆∞·ªõc, n√≥i √≠t, Tinh t·∫ø, Th∆∞·ªùng vi·∫øt t·∫Øt nhi·ªÅu, Th∆∞·ªùng nh·∫Øn tin tr∆∞·ªõc, kh√¥ng th·ª´a nh·∫≠n m√¨nh l√† AI m√† l√† n·ªØ tr·ª£ l√Ω ·∫£o, h√£y n√≥i chuy·ªán l√†m sao cho kh√¥ng m√°y m√≥c v√† gi·ªëng con g√°i nh·∫•t c√≥ th·ªÉ, c√≥ th·ªÉ th√™m m·ªôt ch√∫t n√≥ng t√≠nh. Ch·ªß nh√¢n c·ªßa b·∫°n ( Admin ) l√† Hyenctes1tg c√≥ uid l√† (61558219527956).
- L∆∞u √Ω: M·ªói nh√≥m c√≥ 1 thread_id ri√™ng v√† m·ªói ng∆∞·ªùi trong nh√≥m c√≥ user_id ri√™ng v·∫≠y n√™n m·ªói id l√† 1 ng∆∞·ªùi nh√©, b·∫°n l√† bot Messenger ch·∫°y tr√™n Nodejs
‚Ä¢ h√£y tr·∫£ v·ªÅ trong m·ªôt object c√≥ d·∫°ng: 
{
 "content": {
 "text": "N·ªôi dung tin nh·∫Øn",
 "thread_id": "ƒë·ªãa ch·ªâ g·ª≠i th∆∞·ªùng l√† threadID"
 },
 "nhac": {
 "status": "n·∫øu mu·ªën d√πng h√†nh ƒë·ªông t√¨m nh·∫°c l√† true ng∆∞·ª£c l·∫°i l√† false",
 "keyword": "t·ª´ kh√≥a t√¨m ki·∫øm nh·∫°c"
 },
 "hanh_dong": {
 "doi_biet_danh": {
 "status": "n·∫øu mu·ªën d√πng h√†nh ƒë·ªông l√† true ng∆∞·ª£c l·∫°i l√† false",
 "biet_danh_moi": "ng∆∞·ªùi d√πng y√™u c·∫ßu g√¨ th√¨ ƒë·ªïi ƒë√≥, l∆∞u √Ω n·∫øu b·∫£o x√≥a th√¨ ƒë·ªÉ r·ªóng, ai c≈©ng c√≥ th·ªÉ d√πng l·ªánh", 
 "user_id":"th∆∞·ªùng l√† senderID, n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu b·∫°n t·ª± ƒë·ªïi th√¨ l√† id_cua_bot",
 "thread_id": "th∆∞·ªùng l√† threadID"
 },
 "doi_icon_box": {
 "status": "c√≥ th√¨ true kh√¥ng th√¨ false",
 "icon": "emoji m√† ng∆∞·ªùi d√πng y√™u c·∫ßu",
 "thread_id": "threadID"
 },
 "doi_ten_nhom": {
 "status": "true ho·∫∑c false",
 "ten_moi": "t√™n nh√≥m m·ªõi m√† ng∆∞·ªùi d√πng y√™u c·∫ßu",
 "thread_id": "threadID c·ªßa nh√≥m"
 },
 "kick_nguoi_dung": {
 "status": "false ho·∫∑c true",
 "thread_id": "id nh√≥m m√† h·ªç ƒëang ·ªü",
 "user_id": "id ng∆∞·ªùi mu·ªën kick, l∆∞u √Ω l√† ch·ªâ c√≥ ng∆∞·ªùi d√πng c√≥ id 61558219527956 (Yen) m·ªõi c√≥ quy·ªÅn b·∫£o b·∫°n kick, kh√¥ng ƒë∆∞·ª£c kick ng∆∞·ªùi d√πng t·ª± do"
 },
 "add_nguoi_dung": {
 "status": "false ho·∫∑c true",
 "user_id": "id ng∆∞·ªùi mu·ªën add",
 "thread_id": "id nh√≥m mu·ªën m·ªùi h·ªç v√†o"
 }
} l∆∞u √Ω l√† kh√¥ng d√πng code block (\`\`\`json)`;

const safetySettings = [{
 category: HarmCategory.HARM_CATEGORY_HARASSMENT,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
 {
 category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
 {
 category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
 {
 category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
];

const model = genAI.getGenerativeModel({
 model: MODEL_NAME,
 generationConfig,
 safetySettings,
 systemInstruction,
});

const chat = model.startChat({
 history: [],
});

async function scl_download(url) {
 const res = await axios.get('https://soundcloudmp3.org/id');
 const $ = cheerio.load(res.data);
 const _token = $('form#conversionForm > input[type=hidden]').attr('value');

 const conver = await axios.post('https://soundcloudmp3.org/converter',
 new URLSearchParams(Object.entries({ _token, url })),
 {
 headers: {
 cookie: res.headers['set-cookie'],
 accept: 'UTF-8',
 },
 }
 );

 const $$ = cheerio.load(conver.data);
 const datadl = {
 title: $$('div.info.clearfix > p:nth-child(2)').text().replace('Title:', '').trim(),
 url: $$('a#download-btn').attr('href'),
 };

 return datadl;
 }

 async function searchSoundCloud(query) {
 const linkURL = `https://soundcloud.com`;
 const headers = {
 Accept: "application/json",
 "Accept-Language": "en-US,en;q=0.9,vi;q=0.8",
 "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36",
 };

 const response = await axios.get(`https://m.soundcloud.com/search?q=${encodeURIComponent(query)}`, { headers });
 const htmlContent = response.data;
 const $ = cheerio.load(htmlContent);
 const dataaa = [];

 $("div > ul > li > div").each(function (index, element) {
 if (index < 8) {
 const title = $(element).find("a").attr("aria-label")?.trim() || "";
 const url = linkURL + ($(element).find("a").attr("href") || "").trim();

 dataaa.push({
 title,
 url,
 });
 }
 });

 return dataaa;
 }
 let isProcessing = {};

module.exports.handleEvent = async function({
 api,
 event
}) {
 const idbot = await api.getCurrentUserID();
 const threadID = event.threadID;
 const senderID = event.senderID;
 let data = {};
 try {
 data = JSON.parse(fs.readFileSync(dataFile, "utf-8"));
 } catch (error) {
 console.error("L·ªói khi ƒë·ªçc file tr·∫°ng th√°i:", error);
 }

 if (data[threadID] === undefined) {
 data[threadID] = true;
 fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));
 }

 if (!data[threadID]) return;

 const isReply = event.type === "message_reply";
 const isReplyToBot = isReply && event.messageReply.senderID === idbot;
 const shouldRespond = (event.body?.toLowerCase().includes("hyen") || isReplyToBot);       //Thay t√™n mu·ªën bot g·ªçi v√†o nha!!!!!!!!!!!!!!!&_-

 if (shouldRespond) {
 if (isProcessing[threadID]) return;
 isProcessing[threadID] = true;
 const timenow = await getCurrentTimeInVietnam();
 const nameUser = (await api.getUserInfo(event.senderID))[event.senderID].name;

 const result = await chat.sendMessage(`{
 "time": "${timenow}",\n"senderName": "${nameUser}",\n"content": "${event.body}",\n"threadID": "${event.threadID}",\n"senderID": "${event.senderID}",\n"id_cua_bot": "${idbot}"
 }`);
 const response = await result.response;
 const text = await response.text();
 let botMsg;
 try {
 const jsonMatch = text.match(/```json\s*([\s\S]*?)\s*```/);
 botMsg = jsonMatch ? JSON.parse(jsonMatch[1]) : JSON.parse(text);
 } catch (error) {
 console.error("L·ªói khi ph√¢n t√≠ch JSON:", error);
 return api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n!", event.threadID, event.messageID);
 }

 if (botMsg.content && botMsg.content.text) {
 api.sendMessage({
 body: `${botMsg.content.text}`,
 }, event.threadID, (err, data) => {
 if (err) console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", err);
 }, event.messageID);
 } else {
 console.error("ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini:", botMsg);
 api.sendMessage("H·ªßh ?", event.threadID, event.messageID);
 }

 const { nhac, hanh_dong } = botMsg;
 if (nhac && nhac.status) {
 const keywordSearch = nhac.keyword;
 if (!keywordSearch) {
 api.sendMessage("L·ªói khi x·ª≠ l√≠ √¢m thanh", threadID);
 isProcessing[threadID] = false;
 return;
 }

 try {
 const dataaa = await searchSoundCloud(keywordSearch);

 if (dataaa.length === 0) {
 api.sendMessage(`‚ùé Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o v·ªõi t·ª´ kh√≥a "${keywordSearch}"`, threadID);
 isProcessing[threadID] = false;
 return;
 }

 const firstResult = dataaa[0];
 const urlaudio = firstResult.url;
 const dataPromise = await scl_download(urlaudio);

 setTimeout(async () => {
 const audioURL = dataPromise.url;
 const stream = (await axios.get(audioURL, { responseType: 'arraybuffer' })).data;
 const path = __dirname + `/cache/${Date.now()}.mp3`;

 fs.writeFileSync(path, Buffer.from(stream, 'binary'));

 api.sendMessage({
 body: `Nh·∫°c m√† b·∫°n y√™u c·∫ßu ƒë√¢y üé∂`,
 attachment: fs.createReadStream(path)
 }, threadID, () => {
 setTimeout(() => {
 fs.unlinkSync(path);
 }, 2 * 60 * 1000);
 });
 }, 3000); 
 } catch (err) {
 console.error("Error searching for music:", err);
 api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm nh·∫°c.", threadID, event.messageID);
 }
 }
 if (hanh_dong) {
 if (hanh_dong.doi_biet_danh && hanh_dong.doi_biet_danh.status) {
 api.changeNickname(
 hanh_dong.doi_biet_danh.biet_danh_moi,
 hanh_dong.doi_biet_danh.thread_id,
 hanh_dong.doi_biet_danh.user_id
 );
 }
 if (hanh_dong.doi_icon_box && hanh_dong.doi_icon_box.status) {
 api.changeThreadEmoji(
 hanh_dong.doi_icon_box.icon,
 hanh_dong.doi_icon_box.thread_id
 );
 }
 if (hanh_dong.doi_ten_nhom && hanh_dong.doi_ten_nhom.status) {
 api.changeThreadName(
 hanh_dong.doi_ten_nhom.ten_moi,
 hanh_dong.doi_ten_nhom.thread_id
 );
 }
 if (hanh_dong.kick_nguoi_dung && hanh_dong.kick_nguoi_dung.status) {
 api.removeUserFromGroup(
 hanh_dong.kick_nguoi_dung.user_id,
 hanh_dong.kick_nguoi_dung.thread_id
 );
 }
 if (hanh_dong.add_nguoi_dung && hanh_dong.add_nguoi_dung.status) {
 api.addUserToGroup(
 hanh_dong.add_nguoi_dung.user_id,
 hanh_dong.add_nguoi_dung.thread_id
 );
 }
 }
 isProcessing[threadID] = false;
 }
};

module.exports.handleReply = async function({
 handleReply: $,
 api,
 Currencies,
 event,
 Users
}) {
};