const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { createCanvas, loadImage } = require('canvas');

// ========== C·∫§U H√åNH GAME ========== //
const CONFIG = {
  INITIAL_BALANCE: 50000,
  WIN_RATE: 1.96,
  MIN_BET: 1000,
  MAX_BET: 5000000,
  GAME_STATUS: true,
  ADMIN_IDS: ['100000000000000'] // ID admin c·ªßa b·∫°n
};

// ========== QU·∫¢N L√ù D·ªÆ LI·ªÜU ========== //
const DATA_PATH = path.join(__dirname, 'taixiu_data.json');

// H√†m kh·ªüi t·∫°o d·ªØ li·ªáu
function initData() {
  if (!fs.existsSync(DATA_PATH)) {
    fs.writeFileSync(DATA_PATH, JSON.stringify({
      players: {},
      gameHistory: [],
      systemBalance: 10000000
    }, null, 2));
  }
  return JSON.parse(fs.readFileSync(DATA_PATH, 'utf8'));
}

let gameData = initData();

function saveData() {
  fs.writeFileSync(DATA_PATH, JSON.stringify(gameData, null, 2));
}

// ========== H√ÄM T·∫†O H√åNH ·∫¢NH ========== //
async function createGameImage(dices, result, betInfo, userBalance) {
  const canvas = createCanvas(800, 500);
  const ctx = canvas.getContext('2d');
  
  // V·∫Ω n·ªÅn
  const gradient = ctx.createLinearGradient(0, 0, 800, 500);
  gradient.addColorStop(0, '#1a1a2e');
  gradient.addColorStop(1, '#16213e');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // V·∫Ω logo
  ctx.fillStyle = '#f1c40f';
  ctx.font = 'bold 36px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('üé≤ T√ÄI X·ªàU SUNWIN üé≤', canvas.width/2, 50);

  // V·∫Ω x√∫c x·∫Øc
  for (let i = 0; i < 3; i++) {
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(200 + i*150, 100, 100, 100);
    ctx.fillStyle = '#000000';
    ctx.font = 'bold 48px Arial';
    ctx.fillText(dices[i].toString(), 250 + i*150, 170);
  }

  // V·∫Ω k·∫øt qu·∫£
  ctx.fillStyle = result === 'T√ÄI' ? '#2ecc71' : '#e74c3c';
  ctx.font = 'bold 40px Arial';
  ctx.fillText(`K·∫æT QU·∫¢: ${result} (${dices.reduce((a,b) => a+b)})`, canvas.width/2, 280);

  // V·∫Ω th√¥ng tin
  ctx.fillStyle = '#ffffff';
  ctx.font = '24px Arial';
  ctx.textAlign = 'left';
  ctx.fillText(`üéØ L·ª∞A CH·ªåN: ${betInfo.choice.toUpperCase()}`, 50, 340);
  ctx.fillText(`üí∞ TI·ªÄN C∆Ø·ª¢C: ${betInfo.amount.toLocaleString()}`, 50, 380);
  ctx.fillText(`üíé S·ªê D∆Ø: ${userBalance.toLocaleString()}`, 50, 420);

  return canvas.toBuffer();
}

// ========== C√ÅC H√ÄM CH√çNH ========== //
async function handleBet(api, event, choice, amount) {
  const { threadID, senderID, messageID } = event;

  // Ki·ªÉm tra game status
  if (!CONFIG.GAME_STATUS) {
    return api.sendMessage('‚ùå Game ƒëang b·∫£o tr√¨, vui l√≤ng quay l·∫°i sau!', threadID, messageID);
  }

  // Ki·ªÉm tra l·ª±a ch·ªçn
  if (!['t√†i', 'x·ªâu'].includes(choice.toLowerCase())) {
    return api.sendMessage('‚ö†Ô∏è Vui l√≤ng ch·ªçn "T√ÄI" ho·∫∑c "X·ªàU"', threadID, messageID);
  }

  // Ki·ªÉm tra s·ªë ti·ªÅn
  if (isNaN(amount) || amount < CONFIG.MIN_BET || amount > CONFIG.MAX_BET) {
    return api.sendMessage(
      `‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i t·ª´ ${CONFIG.MIN_BET.toLocaleString()} ƒë·∫øn ${CONFIG.MAX_BET.toLocaleString()}`,
      threadID,
      messageID
    );
  }

  // Kh·ªüi t·∫°o ng∆∞·ªùi ch∆°i
  if (!gameData.players[senderID]) {
    gameData.players[senderID] = {
      name: (await api.getUserInfo(senderID))[senderID].name,
      balance: CONFIG.INITIAL_BALANCE,
      win: 0,
      lose: 0
    };
  }

  // Ki·ªÉm tra s·ªë d∆∞
  if (gameData.players[senderID].balance < amount) {
    return api.sendMessage(
      `‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß! B·∫°n c√≤n ${gameData.players[senderID].balance.toLocaleString()}`,
      threadID,
      messageID
    );
  }

  // Tr·ª´ ti·ªÅn c∆∞·ª£c
  gameData.players[senderID].balance -= amount;
  saveData();

  // Th√¥ng b√°o c∆∞·ª£c
  api.sendMessage(
    `üé∞ ${gameData.players[senderID].name} ƒë√£ c∆∞·ª£c ${choice.toUpperCase()} ${amount.toLocaleString()}\n` +
    `‚è≥ ƒêang ch·ªù k·∫øt qu·∫£...`,
    threadID
  );

  // T·∫°o k·∫øt qu·∫£ sau 5s
  setTimeout(async () => {
    const dices = [
      Math.floor(Math.random() * 6) + 1,
      Math.floor(Math.random() * 6) + 1,
      Math.floor(Math.random() * 6) + 1
    ];
    const total = dices.reduce((a, b) => a + b);
    const result = total >= 11 ? 'T√ÄI' : 'X·ªàU';
    const isWin = choice.toLowerCase() === result.toLowerCase();

    // X·ª≠ l√Ω th·∫Øng/thua
    if (isWin) {
      const winAmount = Math.floor(amount * CONFIG.WIN_RATE);
      gameData.players[senderID].balance += winAmount;
      gameData.players[senderID].win++;
      api.sendMessage(
        `üéâ CH√öC M·ª™NG! B·∫°n ƒë√£ th·∫Øng ${winAmount.toLocaleString()}\n` +
        `üí∞ S·ªë d∆∞ m·ªõi: ${gameData.players[senderID].balance.toLocaleString()}`,
        threadID
      );
    } else {
      gameData.players[senderID].lose++;
      api.sendMessage(
        `üò¢ R·∫§T TI·∫æC! B·∫°n ƒë√£ thua ${amount.toLocaleString()}\n` +
        `üí∞ S·ªë d∆∞ c√≤n: ${gameData.players[senderID].balance.toLocaleString()}`,
        threadID
      );
    }

    // L∆∞u l·ªãch s·ª≠
    gameData.gameHistory.unshift({
      player: senderID,
      choice,
      amount,
      result,
      time: new Date().toISOString()
    });
    
    // Gi·ªõi h·∫°n l·ªãch s·ª≠
    if (gameData.gameHistory.length > 50) {
      gameData.gameHistory.pop();
    }

    // G·ª≠i h√¨nh ·∫£nh
    const image = await createGameImage(
      dices,
      result,
      { choice, amount },
      gameData.players[senderID].balance
    );
    
    api.sendMessage({
      attachment: image,
      body: `üé≤ K·∫æT QU·∫¢: ${dices.join(' + ')} = ${total} (${result})`
    }, threadID);

    saveData();
  }, 5000);
}

// ========== L·ªÜNH ADMIN ========== //
function toggleGame(api, event, status) {
  const { threadID, senderID, messageID } = event;
  
  if (!CONFIG.ADMIN_IDS.includes(senderID)) {
    return api.sendMessage('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn!', threadID, messageID);
  }

  CONFIG.GAME_STATUS = status;
  api.sendMessage(
    `‚úÖ Game ƒë√£ ƒë∆∞·ª£c ${status ? 'B·∫¨T' : 'T·∫ÆT'}`,
    threadID,
    messageID
  );
}

// ========== X·ª¨ L√ù S·ª∞ KI·ªÜN ========== //
module.exports = {
  config: {
    name: "taixiu",
    version: "2.0",
    hasPermission: 0,
    credits: "D-Jukie",
    description: "Game T√†i X·ªâu ƒë·ªïi th∆∞·ªüng",
    commandCategory: "Game",
    usages: "[t√†i/x·ªâu] [s·ªë ti·ªÅn]",
    cooldowns: 5
  },

  onStart: async function({ api, event, args }) {
    const { threadID, senderID, messageID } = event;
    
    // L·ªánh ki·ªÉm tra s·ªë d∆∞
    if (args[0] === 's·ªë d∆∞' || args[0] === 'balance') {
      if (!gameData.players[senderID]) {
        gameData.players[senderID] = {
          balance: CONFIG.INITIAL_BALANCE,
          win: 0,
          lose: 0
        };
        saveData();
      }
      
      return api.sendMessage(
        `üí∞ S·ªê D∆Ø: ${gameData.players[senderID].balance.toLocaleString()}\n` +
        `üèÜ TH·∫ÆNG: ${gameData.players[senderID].win} l·∫ßn\n` +
        `üò¢ THUA: ${gameData.players[senderID].lose} l·∫ßn`,
        threadID,
        messageID
      );
    }
    
    // L·ªánh admin
    if (args[0] === 'on' && CONFIG.ADMIN_IDS.includes(senderID)) {
      return toggleGame(api, event, true);
    }
    
    if (args[0] === 'off' && CONFIG.ADMIN_IDS.includes(senderID)) {
      return toggleGame(api, event, false);
    }
    
    // X·ª≠ l√Ω c∆∞·ª£c
    if (['t√†i', 'x·ªâu'].includes(args[0]?.toLowerCase()) && !isNaN(args[1])) {
      return handleBet(api, event, args[0], parseInt(args[1]));
    }
    
    // H∆∞·ªõng d·∫´n
    api.sendMessage(
      `üé∞ GAME T√ÄI X·ªàU\n` +
      `üëâ C√°ch ch∆°i: t√†i/x·ªâu [s·ªë ti·ªÅn]\n` +
      `üìå V√≠ d·ª•: t√†i 10000 ho·∫∑c x·ªâu 5000\n` +
      `üí∞ S·ªë d∆∞: ${gameData.players[senderID]?.balance.toLocaleString() || CONFIG.INITIAL_BALANCE.toLocaleString()}\n` +
      `üìä T·ª∑ l·ªá th·∫Øng: x${CONFIG.WIN_RATE}`,
      threadID,
      messageID
    );
  },

  handleEvent: async function({ api, event }) {
    const { body, threadID, senderID } = event;
    
    // X·ª≠ l√Ω tin nh·∫Øn kh√¥ng prefix
    const betMatch = body.match(/^(t√†i|x·ªâu)\s+(\d+)$/i);
    if (betMatch && CONFIG.GAME_STATUS) {
      return handleBet(api, event, betMatch[1], parseInt(betMatch[2]));
    }
  }
};